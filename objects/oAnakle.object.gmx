<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sAnakle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables

//Keyboard
kRight = false;
kLeft = false;
kJump = false;
//Velocity &amp; acceleration
vx = 0;
vy = 0;
accel = 1;
//Sub-pixel movement
cx = 0;
cy = 0;

//Maximum velocities
vMax     = 10.0;
vMaxDiag = vMax*sqrt(2)/2;

canMove=false;
visible=false;
objectTarget = instance_nearest(x, y, oPlayerPar);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apply Movement

//Sub-pixel movement
var vxNew, vyNew;

cx += vx;
cy += vy;
vxNew = round(cx);
vyNew = round(cy);
cx -= vxNew;
cy -= vyNew;



repeat (abs(vyNew)) {
    y += sign(vy);
}

repeat (abs(vxNew)) {
    x += sign(vx);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

//Input
kMove  = keyboard_check_pressed(ord('Q'));
kTrigg = keyboard_check_pressed(ord('E'));
kRight = keyboard_check(ord('D')) || keyboard_check(vk_right);
kLeft  = keyboard_check(ord('A')) || keyboard_check(vk_left);
kUp    = keyboard_check(ord('W')) || keyboard_check(vk_up);
kDown  = keyboard_check(ord('S')) || keyboard_check(vk_down);

//Appear
if(kMove &amp;&amp; !canMove){
    visible=true;
    canMove=true;
    objectTarget.canMove=false;
}else if(kMove &amp;&amp; canMove){
    visible=false;
    canMove=false;
    if(place_meeting(x, y, oPlayerPar)){
        objectTarget=instance_nearest(x, y, oPlayerPar);
    }
    objectTarget.canMove=true;
}
    
    
//Movement in 8 directions (4-axis and 4-diags)
if(canMove){
    if(kRight &amp;&amp; kUp){
        vx=Approach(vx, vMaxDiag, accel);
        vy=Approach(vy, -vMaxDiag, accel);
    }else if(kLeft &amp;&amp; kUp){
        vx=Approach(vx, -vMaxDiag, accel);
        vy=Approach(vy, -vMaxDiag, accel);
    }else if(kRight &amp;&amp; kDown){
        vx=Approach(vx, vMaxDiag, accel);
        vy=Approach(vy, vMaxDiag, accel);
    }else if(kLeft &amp;&amp; kDown){
        vx=Approach(vx, -vMaxDiag, accel);
        vy=Approach(vy, vMaxDiag, accel);
    }else if (kRight &amp;&amp; !kLeft){
        vx=Approach(vx, vMax, accel);
    }else if (kLeft &amp;&amp; !kRight){
        vx=Approach(vx, -vMax, accel);
    }else if (kUp &amp;&amp; !kDown){
        vy=Approach(vy, -vMax, accel);
    }else if (kDown &amp;&amp; !kUp){
        vy=Approach(vy, vMax, accel);
    }
    //Friction
    if(!kLeft &amp;&amp; !kRight){
        vx=Approach(vx, 0, accel);
    }
    if(!kUp &amp;&amp; !kDown){
        vy=Approach(vy, 0, accel);
    }
}else{
    x=objectTarget.x;
    y=objectTarget.y;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
