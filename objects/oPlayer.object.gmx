<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables

//Keyboard
kRight = false;
kLeft = false;
kJump = false;
//Velocity
vx = 0;
vy = 0;
//Sub-pixel movement
cx = 0;
cy = 0;

//Some variables
groundAccel = 1.00;
groundFric  = 2.00;
airAccel    = 1.00;
airFric     = 0.01;
vxMax       = 8.00;
vyMax       = 18.0;
jumpHeight  = 11.5;
gravRise    = 0.70;
gravFall    = 1.40;
gravSlide   = 0.30;

//Control variables
clingTime   = 4.00;
canMove     = true;
canJump     = true;

//Wall and floor check
cRight = instance_place(x+1, y, oBlock);
cLeft  = instance_place(x-1, y, oBlock);
platformTarget = instance_nearest(x, y, oBlock);

onGround = OnGround();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///canMove

canMove = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collisions

//Vertical collision
if(place_meeting(x, y+vy, oBlock)){
    while(!place_meeting(x, y+sign(vy), oBlock)){
        y+=sign(vy);
    }
    vy=0;
}

//Horizontal collision
if(place_meeting(x+vx, y, oBlock)){
    while(!place_meeting(x+sign(vx), y, oBlock)){
        x+=sign(vx);
    }
    vx=0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apply Movement

//Sub-pixel movement
var vxNew, vyNew;

cx += vx;
cy += vy;
vxNew = round(cx);
vyNew = round(cy);
cx -= vxNew;
cy -= vyNew;



repeat (abs(vyNew)) {
    y += sign(vy);
}

repeat (abs(vxNew)) {
    x += sign(vx);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

//Input
kRight = keyboard_check(ord('D'));
kLeft  = keyboard_check(ord('A'));
kJump  = keyboard_check(vk_space);

//Choose the right acceleration and friction
onGround = OnGround();
if(onGround){
    tempAccel = groundAccel;
    tempFric  = groundFric;
}else{
    tempAccel = airAccel;
    tempFric  = airFric;
}

//Choose the right gravity
cRight = instance_place(x+1, y, oBlock);
cLeft  = instance_place(x-1, y, oBlock);

if((vy&gt;=0 || !kJump)){
    tempGrav=gravFall;
}else if (kJump){
    tempGrav=gravRise;
}
if ((cLeft || cRight) &amp;&amp; vy&gt;=0){
    tempGrav=gravSlide;
}

//Apply gravity
if(!onGround){
    vy = Approach(vy, vyMax, tempGrav);
}else{
    vy = 0;
}

//Right and Left
if(canMove){
    if (kRight &amp;&amp; !kLeft){
        if(vx &lt; 0){
            vx = Approach(vx, 0, tempFric);
        }
        vx = Approach(vx, vxMax, tempAccel);
    }else if (kLeft &amp;&amp; !kRight){
        if(vx &gt; 0){
            vx = Approach(vx, 0, tempFric);
        }
        vx = Approach(vx, -vxMax, tempAccel);
    }
}

//Friction
if(!kRight &amp;&amp; !kLeft){
    vx = Approach(vx, 0, tempFric);
}

//Jump
if (kJump &amp;&amp; onGround &amp;&amp; canJump){
    vy = -jumpHeight;
    canJump = false;
}
if(keyboard_check_released(vk_space)){
    canJump = true;
}

//Wall jump
if(!onGround &amp;&amp; canJump){
    if(cLeft &amp;&amp; kJump){
    //vxMax = 14.0;
        if (kLeft){
            vy = -jumpHeight;
            vx = vxMax*0.5;
        }else{
            vy = -jumpHeight*0.5;
            vx = vxMax;
        }
    canJump = false;
    }else if (cRight &amp;&amp; kJump){
    //vxMax = 14.0;
        if (kRight){
            vy = -jumpHeight;
            vx = -vxMax*0.5;
        }else{
            vy = -jumpHeight*0.5;
            vx = -vxMax;
        }
    canJump = false;
    }
}
/*if ((onGround || cLeft || cRight) &amp;&amp; vx&lt;=8){
    vxMax = 8.00;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Testing, debugging and panic buttons

//Wall check
/*
cRight = instance_place(x+1, y, oBlock);
cLeft  = instance_place(x-1, y, oBlock);

oBlock.sprite_index = sBlock;
if(cLeft != noone &amp;&amp; !place_meeting(x, y-1, oBlock)){
    cLeft.sprite_index = sCheck;
}else if (cRight != noone &amp;&amp; !place_meeting(x, y-1, oBlock)){
    cRight.sprite_index = sCheck;
}*/

sprite_index = sPlayer;
if(cLeft || cRight){
    sprite_index = sCheck;
}
    
/*variableTest = gravRise;
changeTest   = 0.05;
if(keyboard_check_pressed(vk_down)){
    variableTest-=changeTest;
}
if(keyboard_check_pressed(vk_up)){
    variableTest+=changeTest;
}
gravRise = variableTest;*/

if(keyboard_check(ord('P'))){
    x=100;
    y=100;
    vy=0;
    vx=0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text (50, 50, vx);
draw_text (50, 65, vxMax);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
