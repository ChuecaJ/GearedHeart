<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oEntityPar</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables

event_inherited();
//Keyboard
kRight = false;
kLeft = false;
kJump = false;
//Velocity
vx = 0;
vy = 0;
//Sub-pixel movement
cx = 0;
cy = 0;

//Maximum velocities
vxMax       = 10.0;
vyMax       = 25.0;


//Accelerations variables
groundAccel = 1.00;
groundFric  = 2.00;
airAccel    = 1.00;
airFric     = 0.01;

gravRise    = 0.70*1.5;
gravFall    = 1.40*1.7;
gravSlide   = 0.30*1.5;

jumpHeight  = 17.0;

//Control variables
canMove     = false;
canJump     = true;
canPush     = false;//It has to be false
canDie      = true;

//Wall and floor check
cRight = place_meeting(x+1, y, oBlock);
cLeft  = place_meeting(x-1, y, oBlock);
platformTarget = instance_nearest(x, y, oBlock);
yDifference = 0;
xDifference = 0;


offsetBox = (sprite_get_width(sprite_index)/2)+(sprite_get_width(sBox)/2);
pushingRight = place_meeting(x+1, y, oBox);
pushingLeft  = place_meeting(x-1, y, oBox);
boxRight = instance_place(x+1, y, oBox);
boxLeft  = instance_place(x-1, y, oBox);

offsetCentreSelfY = sprite_get_height(sprite_index)/2;

DEAD=false;

onGround = OnGround();

idlex=0;
grow=false;
IDLE=false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///IDLE=false;

IDLE=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///IDLE=true;

IDLE=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///canMove

canMove = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collisions

var vxNew, vyNew;
vxNew=abs(vx);
vyNew=abs(vy);

offsetCentreBlockX = sprite_get_width(sBlock)/2;
offsetCentreBlockY = sprite_get_height(sBlock)/2;



//Vertical collision
if(place_meeting(x, y+vy, oBlock)){
    yDifference = y-offsetCentreSelfY - instance_place(x, y+vy, oBlock).y+offsetCentreBlockY;
    while(!place_meeting(x, y+sign(vy), oBlock)){
        if(yDifference!=0){
            y-=sign(yDifference);
        }else{
            break;
        }
    }
    vy=0;
}

//Horizontal collision
if(place_meeting(x+vx, y, oBlock)){
    xDifference = x - instance_place(x+vx, y, oBlock).x+offsetCentreBlockX;
    while(!place_meeting(x+sign(vx), y, oBlock)){
        if (xDifference!=0){
            x-=sign(xDifference);
        }else{
            break;
        }
    }
    vx=0;
}

//Final, just in case
if(yDifference&lt;=0){
    move_outside_solid(90, 5);
}else{
    move_outside_solid(270, 5);    
}

if(place_meeting(x, y, oBlock)){
    inst=instance_place(x, y, oBlock)
    with(inst){
        centerX=x+sprite_width/2;
    }
    xDifference=x-inst.centerX;
    if(xDifference&lt;=0){
        move_outside_solid(180, 5);
    }else{
        move_outside_solid(0, 5);
    }
}





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apply Movement

//Sub-pixel movement
var vxNew, vyNew;

cx += vx;
cy += vy;
vxNew = round(cx);
vyNew = round(cy);
cx -= vxNew;
cy -= vyNew;

y+=vyNew;
x+=vxNew;


//Reset the movement with the platforms
if(place_meeting(x, y+1, oPlatformH1)){
    platform=instance_place(x, y+1, oPlatformH1)
    if(platform.hspeed!=0){
    vx-=platform.hspeed;
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death

//Suffocate
/*if(( place_meeting(x, y+1, oBlock)&amp;&amp;place_meeting(x, y-1, oBlock))||
    (place_meeting(x+1, y, oBlock)&amp;&amp;place_meeting(x-1, y-1, oBlock))){
    DEAD=true;
}*/

//Fall into the void
if(y&gt;room_height+200){
    DEAD=true;
}
//Spikes
if(canDie){
    if(place_meeting(x, y, oHazardPar)){
        DEAD=true
    }
}

if(DEAD){
    canMove=false;
    if(!instance_exists(oFadeInBlack)){
        instance_create(x, y, oFadeInBlack);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

//Input
kRight = keyboard_check(ord('D'))||keyboard_check(vk_right);
kLeft  = keyboard_check(ord('A'))||keyboard_check(vk_left);
kJump  = keyboard_check(vk_space)||keyboard_check(ord('W'))||keyboard_check(vk_up);

//Choose the right acceleration and friction
onGround = OnGround();
if(onGround){
    tempAccel = groundAccel;
    tempFric  = groundFric;
}else{
    tempAccel = airAccel;
    tempFric  = airFric;
    
}

//Choose the right gravity
cRight = place_meeting(x+1, y, oBlock);
cLeft  = place_meeting(x-1, y, oBlock);

if((vy&gt;=0 || !kJump)){
    tempGrav=gravFall;
}else if (kJump){
    tempGrav=gravRise;
}
if ((cLeft || cRight) &amp;&amp; vy&gt;=0){
    tempGrav=gravSlide;
}

//Apply gravity
if(!onGround){
    vy = Approach(vy, vyMax, tempGrav);
}else{
    vy = 0;
}

//Right and Left
if(canMove){
    if (kRight &amp;&amp; !kLeft){
        if(vx &lt; 0){
            vx = Approach(vx, 0, tempFric);
        }
        vx = Approach(vx, vxMax, tempAccel);
    }else if (kLeft &amp;&amp; !kRight){
        if(vx &gt; 0){
            vx = Approach(vx, 0, tempFric);
        }
        vx = Approach(vx, -vxMax, tempAccel);
    }

    //Jump
    if (kJump &amp;&amp; onGround &amp;&amp; canJump){
        vy = -jumpHeight;
        canJump = false;
        if(!audio_is_playing(sndJump)&amp;&amp;global.sounds){
            audio_play_sound(sndJump, 1, false);
        }
    }
    if(!kJump &amp;&amp; (onGround || place_meeting(x+vx, y, oBlock) || place_meeting(x, y+vy, oBlock))){
        canJump = true;
    }
}
//Friction
if((!kRight &amp;&amp; !kLeft) || !canMove){
    vx = Approach(vx, 0, tempFric);
}

//Move along the platforms
//Horizontal
if(place_meeting(x, y+1, oPlatformH1)){
    platform=instance_place(x, y+1, oPlatformH1);
    if(platform.hspeed!=0){
        vx+=platform.hspeed;
    }
}
//Vertical [in the platform]

//stop idle animation
if(vx!=0||vy!=0) {
    IDLE=false;
    idlex=0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move boxes

vxMax=10.0;
if(canPush &amp;&amp; canMove){
    pushingRight = false;
    pushingLeft  = false;
    if(vx&gt;0){
        pushingRight = place_meeting(x+1, y, oBox);
        if(pushingRight){
            boxRight = instance_place(x+1, y, oBox);
            boxRight.x = x+offsetBox+vx;
            if(!audio_is_playing(sndDrag)&amp;&amp;global.music){
                audio_play_sound(sndDrag, 1, true);
            }
        }
    }else if(vx&lt;0){
        pushingLeft = place_meeting(x-1, y, oBox);
        if(pushingLeft){
            boxLeft = instance_place(x-1, y, oBox);
            boxLeft.x = x-offsetBox+vx;
            if(!audio_is_playing(sndDrag)&amp;&amp;global.music){
                audio_play_sound(sndDrag, 1, true);
            }
        }
    }
    
    if(pushingRight||pushingLeft) {
        vxMax=3.0;
    }else{
        audio_stop_sound(sndDrag);
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Testing, debugging and panic buttons

//draw_sprite(sPlayer, -1, 100, 100);
    
/*variableTest = gravRise;
changeTest   = 0.05;
if(keyboard_check_pressed(vk_down)){
    variableTest-=changeTest;
}
if(keyboard_check_pressed(vk_up)){
    variableTest+=changeTest;
}
gravRise = variableTest;*/

if(keyboard_check(ord('P'))){
    room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*draw_text (50, 50, vx);
draw_text (50, 65, vy);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///"Animation"

if(IDLE){
    if(idlex&lt;=-2){
        grow=true;
    }else if(idlex&gt;=2){
        grow=false;
    }
    
    if(grow){
        idlex+=0.2;
    }else{
        idlex-=0.2;
    }
    
    x1=(x-sprite_width/2)-idlex;
    y1=(y-sprite_height)+idlex;
    x2=(x+sprite_width/2)+idlex;
    y2=(y-sprite_height)+idlex;
    x3=(x+sprite_width/2)+idlex;
    y3=y;
    x4=(x-sprite_width/2)-idlex;
    y4=y;
    
    if(alarm[2]==-1){
        alarm[2]=60;
    }
    
    draw_sprite_pos(sprite_index, 0, x1, y1, x2, y2, x3, y3, x4, y4, 1);
}else if (vy != 0){
    x1=(x-sprite_width/2);
    y1=(y-sprite_height)-vy;
    x2=(x+sprite_width/2);
    y2=(y-sprite_height)-vy;
    x3=(x+sprite_width/2);
    y3=y;
    x4=(x-sprite_width/2);
    y4=y;
    
    draw_sprite_pos(sprite_index, 0, x1, y1, x2, y2, x3, y3, x4, y4, 1);
}else if(vx != 0){
    x1=(x-sprite_width/2)+vx;
    y1=(y-sprite_height);
    x2=(x+sprite_width/2)+vx;
    y2=(y-sprite_height);
    x3=(x+sprite_width/2);
    y3=y;
    x4=(x-sprite_width/2);
    y4=y;
    
    draw_sprite_pos(sprite_index, 0, x1, y1, x2, y2, x3, y3, x4, y4, 1);
}else{
    draw_self();
    if(alarm[1]==-1) alarm[1]=random_range(200, 500);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
