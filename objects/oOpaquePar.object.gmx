<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Size of the object that casts the shadow
bwx = sprite_get_width(sprite_index);
bwy = sprite_get_height(sprite_index);
//Declare the object's points
x1=0;
y1=0;
x2=0;
y2=0;
x3=0;
y3=0;
x4=0;
y4=0;
//Direction between the centre of the light and the object
dirc = 0;
//Declare the shadow's points
x11=0;
y11=0;
x21=0;
y21=0;
x31=0;
y31=0;
x41=0;
y41=0;
//Light's radius
radius = sprite_get_width(sLight);
shadowLength = radius+200;

if(distance_to_point(oLighting.x, oLighting.y)&lt;radius){
    //set the edges of the wall
    x1=x;
    y1=y;
    x2=x;
    y2=y+bwy;
    x3=x+bwx;
    y3=y+bwy;
    x4=x+bwx;
    y4=y;
    
    //set the edges of the shadow
    dirc = point_direction(oLighting.x, oLighting.x, x1, y1);
    x11  = x1 + lengthdir_x(shadowLength, dirc);
    y11  = y1 + lengthdir_y(shadowLength, dirc);
    
    dirc = point_direction(oLighting.x, oLighting.x, x2, y2);
    x21  = x2 + lengthdir_x(shadowLength, dirc);
    y21  = y2 + lengthdir_y(shadowLength, dirc);
    
    dirc = point_direction(oLighting.x, oLighting.x, x3, y3);
    x31  = x3 + lengthdir_x(shadowLength, dirc);
    y31  = y3 + lengthdir_y(shadowLength, dirc);
    
    dirc = point_direction(oLighting.x, oLighting.x, x4, y4);
    x41  = x4 + lengthdir_x(shadowLength, dirc);
    y41  = y4 + lengthdir_y(shadowLength, dirc);
    
    //now we draw the shadows
    draw_primitive_begin(pr_trianglestrip);
    draw_vertex(x1, y1);
    draw_vertex(x11, y11);
    draw_vertex(x2, y2);
    draw_vertex(x21, y21);
    draw_vertex(x3, y3);
    draw_vertex(x31, y31);
    draw_vertex(x4, y4);
    draw_vertex(x41, y41);
    draw_vertex(x1, y1);    //Repeat the first set of points to close the shape
    draw_vertex(x11, y11);
    draw_primitive_end();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/*if(distance_to_point(oLighting.x, oLighting.y)&lt;radius){
    //set the edges of the wall
    x1=x;
    y1=y;
    x2=x;
    y2=y+bwy;
    x3=x+bwx;
    y3=y+bwy;
    x4=x+bwx;
    y4=y;
    
    //set the edges of the shadow
    dirc = point_direction(oLighting.x, oLighting.x, x1, y1);
    x11  = x1 + lengthdir_x(shadowLength, dirc);
    y11  = y1 + lengthdir_y(shadowLength, dirc);
    
    dirc = point_direction(oLighting.x, oLighting.x, x2, y2);
    x21  = x2 + lengthdir_x(shadowLength, dirc);
    y21  = y2 + lengthdir_y(shadowLength, dirc);
    
    dirc = point_direction(oLighting.x, oLighting.x, x3, y3);
    x31  = x3 + lengthdir_x(shadowLength, dirc);
    y31  = y3 + lengthdir_y(shadowLength, dirc);
    
    dirc = point_direction(oLighting.x, oLighting.x, x4, y4);
    x41  = x4 + lengthdir_x(shadowLength, dirc);
    y41  = y4 + lengthdir_y(shadowLength, dirc);
    
    //now we draw the shadows
    draw_primitive_begin(pr_trianglestrip);
    draw_vertex(x1, y1);
    draw_vertex(x11, y11);
    draw_vertex(x2, y2);
    draw_vertex(x21, y21);
    draw_vertex(x3, y3);
    draw_vertex(x31, y31);
    draw_vertex(x4, y4);
    draw_vertex(x41, y41);
    draw_vertex(x1, y1);    //Repeat the first set of points to close the shape
    draw_vertex(x11, y11);
    draw_primitive_end();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
